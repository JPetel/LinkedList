class LinkedListNode
  attr_accessor :value, :next_node

  def initialize(value, next_node=nil)
    @value = value
    @next_node = next_node
  end

  def next?
    !@next_node.nil?
  end
end

def print_values(list_node)
  if list_node
    print "#{list_node.value} --> "
    print_values(list_node.next_node)
  else
    print "nil\n"
    return
  end
end


class Stack
  attr_reader :head

  def initialize(value)
    @head = LinkedListNode.new(value, nil)
  end

  def push(value)
    current_node = @head
    while current_node.next?
      current_node = current_node.next_node
    end
    new_node = LinkedListNode.new(value, nil)
    current_node.next_node = new_node
  end

  def pop
    return print "nil" if @head.nil?
    print "#{@head.value} --> "
    @head = @head.next_node
  end
end

def reverse_list(list)
  if @head
    
  end
end





stack = Stack.new(1)
stack.reverse!
p stack